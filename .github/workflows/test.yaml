name: Log latest release v1
"on":
  push:

    

jobs:
  fetch:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.save.outputs.json }}
    steps:
      - name: Fetch GH pulls
        id: fetch
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/pulls?state=open
          repo: ${{ github.repository }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: Store matrix
        id: save
        uses: nickofthyme/object-remap@v1
        with:
          include.*.number: ${{ toJSON(fromJSON(steps.fetch.outputs.data).*.number) }}
          include.*.title: ${{ toJSON(fromJSON(steps.fetch.outputs.data).*.title) }}
          include.*.username: ${{ toJSON(fromJSON(steps.fetch.outputs.data).*.user.login) }}

  pr-checks:
    name: "PR #${{ matrix.number }} - ${{ matrix.title }}"
    runs-on: ubuntu-latest
    needs: fetch
    strategy:
      matrix: ${{ fromJSON(needs.fetch.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Echo pr number
        run: echo "pr number: ${{ matrix.number }}"
      - name: Echo title
        run: echo "title: ${{ matrix.title }}"
      - name: Echo username
        run: echo "username: ${{ matrix.username }}"
#   job1:
#     runs-on: ubuntu-latest
#     outputs:
#       filenames: ${{ steps.set-matrix.outputs.filenames }}
#     steps:
#     - name: Checkout harness repo
#       uses: actions/checkout@v2
#       with:
#          path: yellow-team-repo
#     - id: set-matrix
#       name: get folder name
#       shell: bash
#       run: |
#           declare -a arrPics
#           DIR=yellow-team-repo
#           for file in $(find ${DIR}/docs/* -type d -maxdepth 0 -exec basename {} \; ); do
#                 arrPics=(${arrPics[@]} "$file")
#           done
#           JSON="{\"tfpaths\":["

#           # Loop by lines
#           while read path; do
#           # Add item to the matrix only if it is not already included
#           JSONline="\"$path\","
#           if [[ "$JSON" != *"$JSONline"* ]]; then
#           JSON="$JSON$JSONline"
#           fi
#           done <<< "$DIFF"
#           JSON="$JSON]}"
#           echo $JSON
#           echo "::set-output name=filenames::$( echo "$JSON" )"
#   job2:
#     runs-on: ubuntu-latest
#     needs: job1
#     strategy:
#       matrix: ${{fromJson(needs.job1.outputs.matrix)}}
#     steps:
#       - uses: actions/checkout@v2

#       - name: test
#         run: echo ${{ matrix.tfpaths }}
    
